diff --git a/src/Board.js b/src/Board.js
index 1f00045..f46f527 100644
--- a/src/Board.js
+++ b/src/Board.js
@@ -75,4 +75,61 @@ export default class Board extends React.Component {
       </div>
     );
   }
+
+  componentDidMount() {
+    this.drake = Dragula([
+      this.swimlanes.backlog.current,
+      this.swimlanes.inProgress.current,
+      this.swimlanes.complete.current,
+    ]);
+    this.drake.on('drop', (el, target, source, sibling) => this.updateClient(el, target, source, sibling));
+  }
+
+  componentWillUnmount() {
+    this.drake.remove();
+  }
+
+  /**
+   * Change the status of client when a Card is moved
+   */
+  updateClient(el, target, _, sibling) {
+    // Reverting DOM changes from Dragula
+    this.drake.cancel(true);
+
+    // Find out which swimlane the Card was moved to
+    let targetSwimlane = 'backlog';
+    if (target === this.swimlanes.inProgress.current) {
+      targetSwimlane = 'in-progress';
+    } else if (target === this.swimlanes.complete.current) {
+      targetSwimlane = 'complete';
+    }
+
+    // Create a new clients array
+    const clientsList = [
+      ...this.state.clients.backlog,
+      ...this.state.clients.inProgress,
+      ...this.state.clients.complete,
+    ];
+    const clientThatMoved = clientsList.find(client => client.id === el.dataset.id);
+    const clientThatMovedClone = {
+      ...clientThatMoved,
+      status: targetSwimlane,
+    };
+
+    // Remove ClientThatMoved from the clientsList
+    const updatedClients = clientsList.filter(client => client.id !== clientThatMovedClone.id);
+
+    // Place ClientThatMoved just before the sibling client, keeping the order
+    const index = updatedClients.findIndex(client => sibling && client.id === sibling.dataset.id);
+    updatedClients.splice(index === -1 ? updatedClients.length : index , 0, clientThatMovedClone);
+
+    // Update React state to reflect changes
+    this.setState({
+      clients: {
+        backlog: updatedClients.filter(client => !client.status || client.status === 'backlog'),
+        inProgress: updatedClients.filter(client => client.status && client.status === 'in-progress'),
+        complete: updatedClients.filter(client => client.status && client.status === 'complete'),
+      }
+    });
+  }
 }
